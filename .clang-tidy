Checks: >
  readability-identifier-naming,
  readability-function-size,
  modernize-*,
  bugprone-*,
  performance-*,
  cppcoreguidelines-*,
  clang-analyzer-*,
  misc-unused-parameters

WarningsAsErrors: ''

CheckOptions:
  # Classes, structs, and enums use PascalCase
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE }

  # Functions use snake_case
  - { key: readability-identifier-naming.FunctionCase, value: lower_case }

  # Variables use snake_case
  - { key: readability-identifier-naming.VariableCase, value: lower_case }
  - { key: readability-identifier-naming.GlobalVariableCase, value: lower_case }
  - { key: readability-identifier-naming.LocalVariableCase, value: lower_case }

  # Constants use UPPER_CASE
  - { key: readability-identifier-naming.ConstantCase, value: UPPER_CASE }

  # Private members use snake_case with "_" prefix
  - { key: readability-identifier-naming.PrivateMemberCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberPrefix, value: _ }

  # Public members use snake_case (customize if needed)
  - { key: readability-identifier-naming.PublicMemberCase, value: lower_case }

  # Template parameters use CamelCase
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }

  # Macros use UPPER_CASE
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }

  # Namespaces use lower_case
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }

